# Automatically tests, builds and deploys the video-storage Node.js microservice to Kubernetes on push to the main branch. 
name: Deploy users microservice

on:

  # Deploys the microservice on push to subfolder video-storage on the main branch of this code repository.
  push:
    branches:
      - master
    paths:
      - 'backend/Microservices/Users/**' # Only trigger on push to video-storage subfolder.
  
  # Allows workflow to be invoked manually through the GitHub Actions user interface.
  workflow_dispatch:

jobs:
  user-microservice:
    runs-on: ubuntu-latest
    
    # Sets environment variables with values extracted from GitHub Actions Repository Secrets.
    env:
      VERSION: ${{ github.sha }}
      CONTAINER_REGISTRY_LOGIN_SERVER: ${{ secrets.CONTAINER_REGISTRY_LOGIN_SERVER }}
      CONTAINER_REGISTRY_USERNAME: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
      CONTAINER_REGISTRY_PASSWORD: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

    steps:

      # Checks-out repository under $GITHUB_WORKSPACE.
      - uses: actions/checkout@v4

      # Installs Node.js.
      - uses: actions/setup-node@v4
        with:
          node-version: 20.17.0
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json' # Path to package-lock.json in video-storage subfolder.
      
      # Installs NPM packages and tests the microservice.
      - name: Test
        working-directory: 'backend' # Sets default path for "run" commands to the video-storage subfolder.
        run: |
          npm ci
      #    npm test

      # Builds the Docker image.
      - name: Build
        run: docker build -t $CONTAINER_REGISTRY_LOGIN_SERVER/user_microservice:$VERSION --file backend/Microservices/Users/Dockerfile .

      # Publishes the Docker image to the Azure Container Registry.
      - name: Publish
        working-directory: 'backend/Microservices/Users' # Sets default path for "run" commands to the video-storage subfolder.
        run: |
          echo $CONTAINER_REGISTRY_PASSWORD | docker login $CONTAINER_REGISTRY_LOGIN_SERVER --username $CONTAINER_REGISTRY_USERNAME --password-stdin
          docker push $CONTAINER_REGISTRY_LOGIN_SERVER/user_microservice:$VERSION

      # Installs Kubectl and connects it to the Azure Kubernetes Service (AKS) cluster.
      # https://github.com/marketplace/actions/kubernetes-cli-kubectl
      - uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
          kubectl-version: v1.31.4
      
      # Expands the manifest YAML file (i.e. replaces placeholders in the YAML file with environment variable values)
      # and deploys the microservice to the Azure Kubernetes Service (AKS) cluster.
      - name: Deploy
        run: envsubst < backend/Microservices/Users/Manifests/deploy.yaml | kubectl apply -f -
